$date
	Sat Oct 12 12:08:31 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Pipeline_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module CPU $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 32 $ ResultW [31:0] $end
$var wire 2 % ResultSrcW [1:0] $end
$var wire 2 & ResultSrcM [1:0] $end
$var wire 2 ' ResultSrcE [1:0] $end
$var wire 1 ( RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 1 * RegWriteE $end
$var wire 32 + ReadDataW [31:0] $end
$var wire 5 , RS2_E [4:0] $end
$var wire 5 - RS1_E [4:0] $end
$var wire 5 . RD_M [4:0] $end
$var wire 5 / RD_E [4:0] $end
$var wire 5 0 RDW [4:0] $end
$var wire 32 1 RD2_E [31:0] $end
$var wire 32 2 RD1_E [31:0] $end
$var wire 32 3 PCTargetE [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 5 PCPlus4W [31:0] $end
$var wire 32 6 PCPlus4M [31:0] $end
$var wire 32 7 PCPlus4E [31:0] $end
$var wire 32 8 PCPlus4D [31:0] $end
$var wire 32 9 PCE [31:0] $end
$var wire 32 : PCD [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 1 < MemWriteE $end
$var wire 1 = JumpE $end
$var wire 32 > InstrD [31:0] $end
$var wire 32 ? Imm_Ext_E [31:0] $end
$var wire 2 @ ForwardBE [1:0] $end
$var wire 2 A ForwardAE [1:0] $end
$var wire 1 B BranchE $end
$var wire 32 C ALU_ResultW [31:0] $end
$var wire 32 D ALU_ResultM [31:0] $end
$var wire 1 E ALUSrcE $end
$var wire 3 F ALUControlE [2:0] $end
$scope module Decode_Stage $end
$var wire 3 G ALUControlE [2:0] $end
$var wire 1 E ALUSrcE $end
$var wire 1 B BranchE $end
$var wire 32 H Imm_Ext_E [31:0] $end
$var wire 1 = JumpE $end
$var wire 1 < MemWriteE $end
$var wire 32 I PCE [31:0] $end
$var wire 32 J PCPlus4E [31:0] $end
$var wire 32 K RD1_E [31:0] $end
$var wire 32 L RD2_E [31:0] $end
$var wire 5 M RD_E [4:0] $end
$var wire 5 N RS1_E [4:0] $end
$var wire 5 O RS2_E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 2 P ResultSrcE [1:0] $end
$var wire 1 Q Zero $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 R ResultW [31:0] $end
$var wire 2 S ResultSrcD [1:0] $end
$var wire 1 ( RegWriteW $end
$var wire 1 T RegWriteD $end
$var wire 5 U RDW [4:0] $end
$var wire 32 V RD2D [31:0] $end
$var wire 32 W RD1D [31:0] $end
$var wire 32 X PCPlus4D [31:0] $end
$var wire 32 Y PCD [31:0] $end
$var wire 1 Z MemWriteD $end
$var wire 1 [ JumpD $end
$var wire 32 \ InstrD [31:0] $end
$var wire 32 ] Imm_ExtD [31:0] $end
$var wire 2 ^ ImmSrcD [1:0] $end
$var wire 1 _ BranchD $end
$var wire 1 ` ALUSrcD $end
$var wire 3 a ALUControlD [2:0] $end
$var reg 3 b ALUControlD_r [2:0] $end
$var reg 1 E ALUSrcD_r $end
$var reg 1 B BranchD_r $end
$var reg 32 c Imm_ExtD_r [31:0] $end
$var reg 1 = JumpD_r $end
$var reg 1 d MemWriteD_r $end
$var reg 32 e PCD_r [31:0] $end
$var reg 32 f PCPlus4D_r [31:0] $end
$var reg 32 g RD1D_r [31:0] $end
$var reg 32 h RD2D_r [31:0] $end
$var reg 5 i RD_D_r [4:0] $end
$var reg 5 j RS1_D_r [4:0] $end
$var reg 5 k RS2_D_r [4:0] $end
$var reg 1 l RegWriteD_r $end
$var reg 2 m ResultSrcD_r [1:0] $end
$scope module Control_Unit $end
$var wire 1 _ Branch $end
$var wire 1 [ Jump $end
$var wire 7 n Op [6:0] $end
$var wire 1 Q Zero $end
$var wire 3 o funct3 [2:0] $end
$var wire 7 p funct7 [6:0] $end
$var wire 1 q jump $end
$var wire 1 r branch $end
$var wire 2 s ResultSrc [1:0] $end
$var wire 1 T RegWrite $end
$var wire 1 Z MemWrite $end
$var wire 2 t ImmSrc [1:0] $end
$var wire 1 ` ALUSrc $end
$var wire 2 u ALUOp [1:0] $end
$var wire 3 v ALUControl [2:0] $end
$scope module alu_dec $end
$var wire 7 w Op [6:0] $end
$var wire 3 x funct3 [2:0] $end
$var wire 7 y funct7 [6:0] $end
$var wire 1 z concate $end
$var wire 2 { ALUOp [1:0] $end
$var wire 3 | ALUControl [2:0] $end
$upscope $end
$scope module main_dec $end
$var wire 7 } Op [6:0] $end
$var wire 2 ~ ResultSrc [1:0] $end
$var wire 1 T RegWrite $end
$var wire 1 Z MemWrite $end
$var wire 1 q Jump $end
$var wire 2 !" ImmSrc [1:0] $end
$var wire 1 r Branch $end
$var wire 1 ` ALUSrc $end
$var wire 2 "" ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module Regiser_File $end
$var wire 5 #" A1 [4:0] $end
$var wire 5 $" A2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ( WE3 $end
$var wire 32 %" WD3 [31:0] $end
$var wire 32 &" RD2 [31:0] $end
$var wire 32 '" RD1 [31:0] $end
$var wire 5 (" A3 [4:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 2 )" ImmSrc [1:0] $end
$var wire 32 *" In [31:0] $end
$var wire 32 +" Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module Execute_Stage $end
$var wire 3 ," ALUControlE [2:0] $end
$var wire 1 E ALUSrcE $end
$var wire 1 B BranchE $end
$var wire 32 -" Imm_Ext_E [31:0] $end
$var wire 1 = JumpE $end
$var wire 1 < MemWriteE $end
$var wire 1 ; MemWriteM $end
$var wire 32 ." PCE [31:0] $end
$var wire 32 /" PCPlus4E [31:0] $end
$var wire 32 0" PCPlus4M [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 1" RD1_E [31:0] $end
$var wire 32 2" RD2_E [31:0] $end
$var wire 5 3" RD_E [4:0] $end
$var wire 5 4" RD_M [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ) RegWriteM $end
$var wire 2 5" ResultSrcE [1:0] $end
$var wire 2 6" ResultSrcM [1:0] $end
$var wire 32 7" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 8" ZeroE $end
$var wire 32 9" SrcBE [31:0] $end
$var wire 32 :" SrcB [31:0] $end
$var wire 32 ;" SrcAE [31:0] $end
$var wire 32 <" ResultW [31:0] $end
$var wire 32 =" ResultE [31:0] $end
$var wire 32 >" PCTargetE [31:0] $end
$var wire 2 ?" ForwardB_E [1:0] $end
$var wire 2 @" ForwardA_E [1:0] $end
$var wire 32 A" ALU_ResultM [31:0] $end
$var reg 1 B" MemWriteE_r $end
$var reg 32 C" PCPlus4E_r [31:0] $end
$var reg 32 D" RD2_E_r [31:0] $end
$var reg 5 E" RD_E_r [4:0] $end
$var reg 1 ) RegWriteE_r $end
$var reg 32 F" ResultE_r [31:0] $end
$var reg 2 G" ResultSrcE_r [1:0] $end
$scope module ALU $end
$var wire 3 H" ALUControl [2:0] $end
$var wire 32 I" AandB [31:0] $end
$var wire 32 J" AorB [31:0] $end
$var wire 1 K" Carry $end
$var wire 1 L" OverFlow $end
$var wire 1 M" Zeroextnd $end
$var wire 32 N" sum [31:0] $end
$var wire 32 O" slt [31:0] $end
$var wire 32 P" mux1 [31:0] $end
$var wire 1 Q" cout $end
$var wire 1 8" Zero $end
$var wire 32 R" Result [31:0] $end
$var wire 1 S" Negative $end
$var wire 32 T" B [31:0] $end
$var wire 32 U" A [31:0] $end
$var parameter 32 V" n $end
$upscope $end
$scope module ALU_Src_MUX $end
$var wire 32 W" b [31:0] $end
$var wire 1 E s $end
$var wire 32 X" y [31:0] $end
$var wire 32 Y" a [31:0] $end
$upscope $end
$scope module Branch_adder $end
$var wire 32 Z" a [31:0] $end
$var wire 32 [" b [31:0] $end
$var wire 32 \" c [31:0] $end
$upscope $end
$scope module SrcAMux $end
$var wire 32 ]" a [31:0] $end
$var wire 32 ^" c [31:0] $end
$var wire 32 _" y [31:0] $end
$var wire 2 `" s [1:0] $end
$var wire 32 a" b [31:0] $end
$upscope $end
$scope module SrcBMux $end
$var wire 32 b" a [31:0] $end
$var wire 32 c" c [31:0] $end
$var wire 32 d" y [31:0] $end
$var wire 2 e" s [1:0] $end
$var wire 32 f" b [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch_Stage $end
$var wire 1 4 PCSrcE $end
$var wire 32 g" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 h" PC_F [31:0] $end
$var wire 32 i" PCPlus4F [31:0] $end
$var wire 32 j" PCPlus4D [31:0] $end
$var wire 32 k" PCF [31:0] $end
$var wire 32 l" PCD [31:0] $end
$var wire 32 m" InstrF [31:0] $end
$var wire 32 n" InstrD [31:0] $end
$var reg 32 o" InstrF_reg [31:0] $end
$var reg 32 p" PCF_reg [31:0] $end
$var reg 32 q" PCPlus4F_reg [31:0] $end
$scope module IMEM $end
$var wire 1 " rst $end
$var wire 32 r" RD [31:0] $end
$var wire 32 s" A [31:0] $end
$upscope $end
$scope module PCAdder $end
$var wire 32 t" b [31:0] $end
$var wire 32 u" c [31:0] $end
$var wire 32 v" a [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 w" a [31:0] $end
$var wire 32 x" b [31:0] $end
$var wire 1 4 s $end
$var wire 32 y" y [31:0] $end
$upscope $end
$scope module programm_counter $end
$var wire 32 z" PC_NEXT [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 {" PC [31:0] $end
$upscope $end
$upscope $end
$scope module Forwarding_Block $end
$var wire 5 |" RD_M [4:0] $end
$var wire 5 }" RS1_E [4:0] $end
$var wire 5 ~" RS2_E [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 " rst $end
$var wire 1 ( RegWriteW $end
$var wire 5 !# RD_W [4:0] $end
$var wire 2 "# ForwardBE [1:0] $end
$var wire 2 ## ForwardAE [1:0] $end
$upscope $end
$scope module Memory_Stage $end
$var wire 32 $# ALU_ResultM [31:0] $end
$var wire 32 %# ALU_ResultW [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 32 &# PCPlus4M [31:0] $end
$var wire 32 '# PCPlus4W [31:0] $end
$var wire 5 (# RD_M [4:0] $end
$var wire 5 )# RD_W [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 ( RegWriteW $end
$var wire 2 *# ResultSrcM [1:0] $end
$var wire 2 +# ResultSrcW [1:0] $end
$var wire 32 ,# WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 -# ReadMem [31:0] $end
$var wire 32 .# ReadDataW [31:0] $end
$var reg 32 /# ALU_ResultM_r [31:0] $end
$var reg 32 0# PCPlus4M_r [31:0] $end
$var reg 5 1# RD_M_r [4:0] $end
$var reg 32 2# ReadMem_r [31:0] $end
$var reg 1 ( RegWriteM_r $end
$var reg 2 3# ResultSrcM_r [1:0] $end
$scope module Data_Memory $end
$var wire 32 4# A [31:0] $end
$var wire 32 5# WD [31:0] $end
$var wire 1 ; WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 6# RD [31:0] $end
$var integer 32 7# i [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack_Stage $end
$var wire 32 8# ALU_ResultW [31:0] $end
$var wire 32 9# PCPlus4W [31:0] $end
$var wire 32 :# ReadDataW [31:0] $end
$var wire 2 ;# ResultSrcW [1:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 <# ResultW [31:0] $end
$scope module WriteBack_Mux $end
$var wire 32 =# a [31:0] $end
$var wire 32 ># b [31:0] $end
$var wire 32 ?# c [31:0] $end
$var wire 2 @# s [1:0] $end
$var wire 32 A# y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 V"
$end
#0
$dumpvars
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b10000000000 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
bx {"
bx z"
bx y"
b0 x"
bx w"
bx v"
bx u"
b100 t"
bx s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
bx k"
b0 j"
bx i"
bx h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 U"
b0 T"
0S"
b0 R"
0Q"
b0 P"
b0 O"
b0 N"
0M"
0L"
0K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
0B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
18"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
0z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
0r
0q
b0 p
b0 o
b0 n
b0 m
0l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
0d
b0 c
b0 b
b0 a
0`
0_
b0 ^
b0 ]
b0 \
0[
0Z
b0 Y
b0 X
b0 W
b0 V
b0 U
0T
b0 S
b0 R
zQ
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
0E
b0 D
b0 C
0B
b0 A
b0 @
b0 ?
b0 >
0=
0<
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
0(
b0 '
b0 &
b0 %
b0 $
b0 #
0"
0!
$end
#50
b100 h"
b100 y"
b100 z"
b100 i"
b100 u"
b100 w"
b0 k"
b0 s"
b0 v"
b0 {"
1!
#100
0!
#150
1!
#200
b10100000000001010010011 m"
b10100000000001010010011 r"
0!
1"
#250
b101 ]
b101 +"
1T
bx V
bx &"
1`
b10 u
b10 {
b10 ""
b101 $"
b10011 n
b10011 w
b10011 }
b1000 h"
b1000 y"
b1000 z"
b1100000000001100010011 m"
b1100000000001100010011 r"
b100 8
b100 X
b100 j"
b10100000000001010010011 >
b10100000000001010010011 \
b10100000000001010010011 *"
b10100000000001010010011 n"
b1000 i"
b1000 u"
b1000 w"
b100 k"
b100 s"
b100 v"
b100 {"
b100 q"
b10100000000001010010011 o"
1!
#300
0!
#350
b11 ]
b11 +"
08"
b101 ="
b101 R"
b101 N"
b11 $"
b101 P"
b101 J"
b1100 h"
b1100 y"
b1100 z"
b11000101000001110110011 m"
b11000101000001110110011 r"
b1000 8
b1000 X
b1000 j"
b100 :
b100 Y
b100 l"
b1100000000001100010011 >
b1100000000001100010011 \
b1100000000001100010011 *"
b1100000000001100010011 n"
bx :"
bx Y"
bx d"
b101 9"
b101 T"
b101 X"
b1100 i"
b1100 u"
b1100 w"
b1000 k"
b1000 s"
b1000 v"
b1000 {"
b1000 q"
b100 p"
b1100000000001100010011 o"
b101 ,
b101 O
b101 k
b101 ~"
b100 7
b100 J
b100 /"
b100 f
b101 /
b101 M
b101 3"
b101 i
b101 3
b101 >"
b101 \"
b101 g"
b101 x"
b101 ?
b101 H
b101 c
b101 -"
b101 W"
b101 ["
bx 1
bx L
bx h
bx 2"
bx b"
1E
1*
1l
1!
#400
0!
#450
b110 ]
b110 +"
1T
b11 ="
b11 R"
bx W
bx '"
0`
b11 N"
b11 P"
b11 J"
b110 $"
b101 #"
b110011 n
b110011 w
b110011 }
b10000 h"
b10000 y"
b10000 z"
b10010000000011 m"
b10010000000011 r"
b11 9"
b11 T"
b11 X"
b1100 8
b1100 X
b1100 j"
b1000 :
b1000 Y
b1000 l"
b11000101000001110110011 >
b11000101000001110110011 \
b11000101000001110110011 *"
b11000101000001110110011 n"
b10000 i"
b10000 u"
b10000 w"
b1100 k"
b1100 s"
b1100 v"
b1100 {"
b101 D
b101 A"
b101 F"
b101 ^"
b101 c"
b101 $#
b101 4#
bx #
bx 7"
bx ,#
bx 5#
bx D"
b100 6
b100 0"
b100 &#
b100 C"
b101 .
b101 4"
b101 E"
b101 |"
b101 (#
1)
b11 ,
b11 O
b11 k
b11 ~"
b1000 7
b1000 J
b1000 /"
b1000 f
b100 9
b100 I
b100 e
b100 ."
b100 Z"
b110 /
b110 M
b110 3"
b110 i
b111 3
b111 >"
b111 \"
b111 g"
b111 x"
b11 ?
b11 H
b11 c
b11 -"
b11 W"
b11 ["
b1100 q"
b1000 p"
b11000101000001110110011 o"
1!
#500
0!
#550
b0 ]
b0 +"
1`
0L"
b0 V
b0 &"
b0 W
b0 '"
b0 u
b0 {
b0 ""
b11 :"
b11 Y"
b11 d"
b0 O"
0M"
0S"
08"
b1 A
b1 @"
b1 `"
b1 ##
b1 S
b1 s
b1 ~
b10 @
b10 ?"
b10 e"
b10 "#
b1000 ="
b1000 R"
0K"
b0 $"
b0 #"
b10 o
b10 x
b11 n
b11 w
b11 }
b1000 N"
0Q"
b11 P"
b111 J"
b1 I"
b101 $
b101 R
b101 %"
b101 <"
b101 a"
b101 f"
b101 <#
b101 A#
b10100 h"
b10100 y"
b10100 z"
b100000000010010010011 m"
b100000000010010010011 r"
b10000 8
b10000 X
b10000 j"
b1100 :
b1100 Y
b1100 l"
b10010000000011 >
b10010000000011 \
b10010000000011 *"
b10010000000011 n"
b101 ;"
b101 U"
b101 _"
b11 9"
b11 T"
b11 X"
b10100 i"
b10100 u"
b10100 w"
b10000 k"
b10000 s"
b10000 v"
b10000 {"
b10000 q"
b1100 p"
b10010000000011 o"
b110 ,
b110 O
b110 k
b110 ~"
b101 -
b101 N
b101 j
b101 }"
b1100 7
b1100 J
b1100 /"
b1100 f
b1000 9
b1000 I
b1000 e
b1000 ."
b1000 Z"
b111 /
b111 M
b111 3"
b111 i
b1110 3
b1110 >"
b1110 \"
b1110 g"
b1110 x"
b110 ?
b110 H
b110 c
b110 -"
b110 W"
b110 ["
bx 2
bx K
bx g
bx 1"
bx ]"
0E
b11 D
b11 A"
b11 F"
b11 ^"
b11 c"
b11 $#
b11 4#
b1000 6
b1000 0"
b1000 &#
b1000 C"
b110 .
b110 4"
b110 E"
b110 |"
b110 (#
b100 5
b100 '#
b100 0#
b100 9#
b100 ?#
b101 0
b101 U
b101 ("
b101 !#
b101 )#
b101 1#
b101 C
b101 %#
b101 /#
b101 8#
b101 =#
1(
1!
#600
0!
#650
18"
b1 ]
b1 +"
b0 ;"
b0 U"
b0 _"
b0 A
b0 @"
b0 `"
b0 ##
b0 ="
b0 R"
bx V
bx &"
b10 u
b10 {
b10 ""
b0 :"
b0 Y"
b0 d"
b0 @
b0 ?"
b0 e"
b0 "#
b0 N"
b0 S
b0 s
b0 ~
b11 $
b11 R
b11 %"
b11 <"
b11 a"
b11 f"
b11 <#
b11 A#
b0 P"
b0 J"
b0 I"
b1 $"
b0 o
b0 x
b10011 n
b10011 w
b10011 }
b11000 h"
b11000 y"
b11000 z"
b100101000000010100110011 m"
b100101000000010100110011 r"
b0 9"
b0 T"
b0 X"
b10100 8
b10100 X
b10100 j"
b10000 :
b10000 Y
b10000 l"
b100000000010010010011 >
b100000000010010010011 \
b100000000010010010011 *"
b100000000010010010011 n"
b11000 i"
b11000 u"
b11000 w"
b10100 k"
b10100 s"
b10100 v"
b10100 {"
b1000 5
b1000 '#
b1000 0#
b1000 9#
b1000 ?#
b110 0
b110 U
b110 ("
b110 !#
b110 )#
b110 1#
b11 C
b11 %#
b11 /#
b11 8#
b11 =#
b1000 D
b1000 A"
b1000 F"
b1000 ^"
b1000 c"
b1000 $#
b1000 4#
b11 #
b11 7"
b11 ,#
b11 5#
b11 D"
b1100 6
b1100 0"
b1100 &#
b1100 C"
b111 .
b111 4"
b111 E"
b111 |"
b111 (#
b0 ,
b0 O
b0 k
b0 ~"
b0 -
b0 N
b0 j
b0 }"
b10000 7
b10000 J
b10000 /"
b10000 f
b1100 9
b1100 I
b1100 e
b1100 ."
b1100 Z"
b1000 /
b1000 M
b1000 3"
b1000 i
b1100 3
b1100 >"
b1100 \"
b1100 g"
b1100 x"
b0 ?
b0 H
b0 c
b0 -"
b0 W"
b0 ["
b0 1
b0 L
b0 h
b0 2"
b0 b"
b0 2
b0 K
b0 g
b0 1"
b0 ]"
b1 '
b1 P
b1 5"
b1 m
1E
b10100 q"
b10000 p"
b100000000010010010011 o"
1!
#700
0!
#750
b1001 ]
b1001 +"
1T
08"
b100000 V
b100000 &"
bx W
bx '"
0`
b1 ="
b1 R"
b1 N"
b1001 $"
b1000 #"
b110011 n
b110011 w
b110011 }
b1 P"
b1 J"
b1000 $
b1000 R
b1000 %"
b1000 <"
b1000 a"
b1000 f"
b1000 <#
b1000 A#
b11100 h"
b11100 y"
b11100 z"
bx m"
bx r"
b11000 8
b11000 X
b11000 j"
b10100 :
b10100 Y
b10100 l"
b100101000000010100110011 >
b100101000000010100110011 \
b100101000000010100110011 *"
b100101000000010100110011 n"
b1 9"
b1 T"
b1 X"
bx :"
bx Y"
bx d"
b11100 i"
b11100 u"
b11100 w"
b11000 k"
b11000 s"
b11000 v"
b11000 {"
b11000 q"
b10100 p"
b100101000000010100110011 o"
b1 ,
b1 O
b1 k
b1 ~"
b10100 7
b10100 J
b10100 /"
b10100 f
b10000 9
b10000 I
b10000 e
b10000 ."
b10000 Z"
b1001 /
b1001 M
b1001 3"
b1001 i
b10001 3
b10001 >"
b10001 \"
b10001 g"
b10001 x"
b1 ?
b1 H
b1 c
b1 -"
b1 W"
b1 ["
bx 1
bx L
bx h
bx 2"
bx b"
b0 '
b0 P
b0 5"
b0 m
b0 D
b0 A"
b0 F"
b0 ^"
b0 c"
b0 $#
b0 4#
b0 #
b0 7"
b0 ,#
b0 5#
b0 D"
b10000 6
b10000 0"
b10000 &#
b10000 C"
b1000 .
b1000 4"
b1000 E"
b1000 |"
b1000 (#
b1 &
b1 6"
b1 *#
b1 G"
b1100 5
b1100 '#
b1100 0#
b1100 9#
b1100 ?#
b111 0
b111 U
b111 ("
b111 !#
b111 )#
b111 1#
b1000 C
b1000 %#
b1000 /#
b1000 8#
b1000 =#
1!
#800
0!
#850
xT
bx a
bx v
bx |
0L"
b1 A
b1 @"
b1 `"
b1 ##
b0 O"
0M"
0S"
08"
bx V
bx &"
xz
x`
bx u
bx {
bx ""
bx ]
bx +"
b10 @
b10 ?"
b10 e"
b10 "#
b1 ="
b1 R"
0K"
x_
xr
xZ
bx S
bx s
bx ~
bx ^
bx t
bx !"
bx )"
x[
xq
b0 $
b0 R
b0 %"
b0 <"
b0 a"
b0 f"
b0 <#
b0 A#
b1 N"
0Q"
b1 P"
b1 J"
b0 I"
bx $"
bx #"
bx p
bx y
bx o
bx x
bx n
bx w
bx }
b100000 h"
b100000 y"
b100000 z"
b1 :"
b1 Y"
b1 d"
b0 ;"
b0 U"
b0 _"
b1 9"
b1 T"
b1 X"
b11100 8
b11100 X
b11100 j"
b11000 :
b11000 Y
b11000 l"
bx >
bx \
bx *"
bx n"
b100000 i"
b100000 u"
b100000 w"
b11100 k"
b11100 s"
b11100 v"
b11100 {"
b10000 5
b10000 '#
b10000 0#
b10000 9#
b10000 ?#
b1000 0
b1000 U
b1000 ("
b1000 !#
b1000 )#
b1000 1#
b0 C
b0 %#
b0 /#
b0 8#
b0 =#
b1 %
b1 +#
b1 3#
b1 ;#
b1 @#
b1 D
b1 A"
b1 F"
b1 ^"
b1 c"
b1 $#
b1 4#
bx #
bx 7"
bx ,#
bx 5#
bx D"
b10100 6
b10100 0"
b10100 &#
b10100 C"
b1001 .
b1001 4"
b1001 E"
b1001 |"
b1001 (#
b0 &
b0 6"
b0 *#
b0 G"
b1001 ,
b1001 O
b1001 k
b1001 ~"
b1000 -
b1000 N
b1000 j
b1000 }"
b11000 7
b11000 J
b11000 /"
b11000 f
b10100 9
b10100 I
b10100 e
b10100 ."
b10100 Z"
b1010 /
b1010 M
b1010 3"
b1010 i
b11101 3
b11101 >"
b11101 \"
b11101 g"
b11101 x"
b1001 ?
b1001 H
b1001 c
b1001 -"
b1001 W"
b1001 ["
b100000 1
b100000 L
b100000 h
b100000 2"
b100000 b"
bx 2
bx K
bx g
bx 1"
bx ]"
0E
b11100 q"
b11000 p"
bx o"
1!
#900
0!
#950
xL"
b0x O"
xM"
xS"
bx I"
xK"
bx :"
bx Y"
bx d"
bx ;"
bx U"
bx _"
bx A
bx @"
bx `"
bx ##
bx N"
xQ"
x8"
bx @
bx ?"
bx e"
bx "#
bx J"
bx P"
bx ="
bx R"
b1 $
b1 R
b1 %"
b1 <"
b1 a"
b1 f"
b1 <#
b1 A#
bx h"
bx y"
bx z"
b100000 8
b100000 X
b100000 j"
b11100 :
b11100 Y
b11100 l"
x4
bx 9"
bx T"
bx X"
b100100 i"
b100100 u"
b100100 w"
b100000 k"
b100000 s"
b100000 v"
b100000 {"
b100000 q"
b11100 p"
bx ,
bx O
bx k
bx ~"
bx -
bx N
bx j
bx }"
b11100 7
b11100 J
b11100 /"
b11100 f
b11000 9
b11000 I
b11000 e
b11000 ."
b11000 Z"
bx /
bx M
bx 3"
bx i
bx 3
bx >"
bx \"
bx g"
bx x"
bx ?
bx H
bx c
bx -"
bx W"
bx ["
bx 1
bx L
bx h
bx 2"
bx b"
x=
xB
bx '
bx P
bx 5"
bx m
x<
xd
xE
bx F
bx G
bx b
bx ,"
bx H"
x*
xl
b1 #
b1 7"
b1 ,#
b1 5#
b1 D"
b11000 6
b11000 0"
b11000 &#
b11000 C"
b1010 .
b1010 4"
b1010 E"
b1010 |"
b1010 (#
b10100 5
b10100 '#
b10100 0#
b10100 9#
b10100 ?#
b1001 0
b1001 U
b1001 ("
b1001 !#
b1001 )#
b1001 1#
b1 C
b1 %#
b1 /#
b1 8#
b1 =#
b0 %
b0 +#
b0 3#
b0 ;#
b0 @#
1!
#1000
0!
#1050
bx -#
bx 6#
b100100 8
b100100 X
b100100 j"
b100000 :
b100000 Y
b100000 l"
bx i"
bx u"
bx w"
bx k"
bx s"
bx v"
bx {"
b11000 5
b11000 '#
b11000 0#
b11000 9#
b11000 ?#
b1010 0
b1010 U
b1010 ("
b1010 !#
b1010 )#
b1010 1#
bx D
bx A"
bx F"
bx ^"
bx c"
bx $#
bx 4#
bx #
bx 7"
bx ,#
bx 5#
bx D"
b11100 6
b11100 0"
b11100 &#
b11100 C"
bx .
bx 4"
bx E"
bx |"
bx (#
bx &
bx 6"
bx *#
bx G"
x;
xB"
x)
b100000 7
b100000 J
b100000 /"
b100000 f
b11100 9
b11100 I
b11100 e
b11100 ."
b11100 Z"
b100100 q"
b100000 p"
1!
#1100
0!
#1150
bx 8
bx X
bx j"
bx :
bx Y
bx l"
bx $
bx R
bx %"
bx <"
bx a"
bx f"
bx <#
bx A#
bx q"
bx p"
b100100 7
b100100 J
b100100 /"
b100100 f
b100000 9
b100000 I
b100000 e
b100000 ."
b100000 Z"
b100000 6
b100000 0"
b100000 &#
b100000 C"
b11100 5
b11100 '#
b11100 0#
b11100 9#
b11100 ?#
bx 0
bx U
bx ("
bx !#
bx )#
bx 1#
bx +
bx .#
bx 2#
bx :#
bx >#
bx C
bx %#
bx /#
bx 8#
bx =#
bx %
bx +#
bx 3#
bx ;#
bx @#
x(
1!
#1200
0!
